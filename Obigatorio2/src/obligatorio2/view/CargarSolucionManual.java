/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package obligatorio2.view;

import java.io.File;
import javax.swing.JOptionPane;
import obligatorio2.model.Envio;
import obligatorio2.model.Equipo;
import obligatorio2.model.Problema;
import obligatorio2.model.Resultado;
import obligatorio2.model.Sistema;
import obligatorio2.utils.ArchivoGrabacion;
import obligatorio2.utils.ArchivoLectura;
import obligatorio2.utils.FechaUtils;



/**
 *
 * @author diego
 */
public class CargarSolucionManual extends javax.swing.JFrame {
    
    private Sistema sistema;
    private String pathArchivo = "";

    /**
     * Creates new form CargarResultadoManual
     */
    public CargarSolucionManual(Sistema s) {
        initComponents();
        sistema = s;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCargaResultados = new javax.swing.JPanel();
        lblResultados = new javax.swing.JLabel();
        btnEnviarSolucion = new javax.swing.JButton();
        fileCargaResultados = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblResultados.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblResultados.setText("Seleccione el archivo que contiene los resultados");

        btnEnviarSolucion.setText("Enviar Solucion");
        btnEnviarSolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarSolucionActionPerformed(evt);
            }
        });

        fileCargaResultados.setApproveButtonText("Seleccionar");
        fileCargaResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileCargaResultadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCargaResultadosLayout = new javax.swing.GroupLayout(pnlCargaResultados);
        pnlCargaResultados.setLayout(pnlCargaResultadosLayout);
        pnlCargaResultadosLayout.setHorizontalGroup(
            pnlCargaResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCargaResultadosLayout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(pnlCargaResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblResultados)
                    .addComponent(btnEnviarSolucion)
                    .addComponent(fileCargaResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlCargaResultadosLayout.setVerticalGroup(
            pnlCargaResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCargaResultadosLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(lblResultados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fileCargaResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(btnEnviarSolucion)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlCargaResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlCargaResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileCargaResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileCargaResultadosActionPerformed
        String com = evt.getActionCommand();
        if (com.equals("ApproveSelection")) {
            //Boton Seleccionar
            pathArchivo = fileCargaResultados.getSelectedFile().getAbsolutePath();
        } else {
            fileCargaResultados.setSelectedFile(new File(""));
        }
    }//GEN-LAST:event_fileCargaResultadosActionPerformed

    private void btnEnviarSolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarSolucionActionPerformed
        if(!pathArchivo.equals("") && pathArchivo != null){
            ArchivoLectura cargaGlobal = new ArchivoLectura(pathArchivo);
            String fechaActual = FechaUtils.getFechaActual("yyy-MM-dd");
            String hora = FechaUtils.getFechaActual("hh");
            String minuto = FechaUtils.getFechaActual("mm");
            ArchivoGrabacion archivoGrabacion = new ArchivoGrabacion("inconsistencias/carga_" + fechaActual + "_" + hora + "_" + minuto + ".txt");
            int numeroLinea = 0;
            int cantidadLineasError = 0;
            while (cargaGlobal.hayMasLineas()){
                numeroLinea ++;
                String linea = cargaGlobal.linea();
                String[] splitLinea = linea.split("#");
                String nombreEquipo = splitLinea[0];
                String lenguaje = splitLinea[1];
                String nombreProblema = splitLinea[2];
                String minutos = splitLinea[3];
                String resultado = splitLinea[4];
                Equipo equipo = sistema.buscarEquipoPorNombre(nombreEquipo);
                if(equipo != null){
                    Problema problema = sistema.buscarProblemaPorNombre(nombreProblema);
                    //Existe equipo
                    Resultado r = new Resultado();
                    if(resultado.equals("1")){
                        r.setResultado(true);
                    } else {
                        r.setResultado(false);
                    }
                    Envio envio = new Envio(equipo, problema, r, Integer.parseInt(minutos), lenguaje);
                    sistema.agregarEnvio(envio);
                    sistema.serializar();
                } else{
                    //Equipo inexistente
                    cantidadLineasError++;
                    String lineaGrabacion = "Linea " + numeroLinea + ", Equipo inexistente: " + nombreEquipo;
                    archivoGrabacion.grabarLinea(lineaGrabacion);
                }
            }
            
            cargaGlobal.cerrar();
            archivoGrabacion.cerrar();
            if(cantidadLineasError > 0){
                JOptionPane.showMessageDialog(this, "Hay errores en la generacion de resultados, verificar archivo de inconsistencias", "INFO", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Se han registrado los resultados correctamente", "INFO", JOptionPane.INFORMATION_MESSAGE);
            }
            
        } else {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado un archivo", "ATENCION", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEnviarSolucionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviarSolucion;
    private javax.swing.JFileChooser fileCargaResultados;
    private javax.swing.JLabel lblResultados;
    private javax.swing.JPanel pnlCargaResultados;
    // End of variables declaration//GEN-END:variables
}
